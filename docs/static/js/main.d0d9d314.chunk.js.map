{"version":3,"sources":["logo.svg","static/constants.js","spellbook.js","Encounter.js","combat.js","static/playerInit.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","constants","BASE_HIT_NUMBER","HIT_DICE_SIDES","spellbook","id","name","type","cost","str","effect","damage","def","acc","eva","debuffStr","debuffDef","debuffAcc","debuffEva","con","heal","getSpells","numSpells","length","spellIndexes","randSpellIndex","Math","floor","random","indexOf","push","spellArray","forEach","index","Encounter","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","player","stats","enemy","enableAction","_displayActions","displayActions","bind","assertThisInitialized","_attack","attack","_draw","_this2","draw","apply","arguments","react_default","a","createElement","className","dist","onPress","console","log","newVals","attacker","defender","hitNum","baseDmg","combatDamage","concat","glanceDmg","hp","critDmg","logMessage","resolveMelee","setState","_this$state","updatePlayer","objectSpread","cards","toConsumableArray","entity","newProps","displayEntity","Encounter_Hand","Component","Hand","_ref","_ref$cards","map","card","key","playerInit","World","ld44_src_Encounter","App","App_World","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d0d9d314.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const constants = {\n  BASE_HIT_NUMBER: 8,\n  HIT_DICE_SIDES: 12\n}\nexport default constants;\n","const spellbook = [\n    {\n        id: 0,\n        name: 'Earthquake',\n        type: 'damage',\n        cost: { str: 1 },\n        effect: { damage: 5 }\n    },{\n        id: 1,\n        name: 'Blood Boil',\n        type: 'damage',\n        cost: { def: 1 },\n        effect: { damage: 5 }\n    },{\n        id: 2,\n        name: 'Bolt Throw',\n        type: 'damage',\n        cost: { acc: 1 },\n        effect: { damage: 5 }\n    },{\n        id: 3,\n        name: 'Shadow Strike',\n        type: 'damage',\n        cost: { eva: 1 },\n        effect: { damage: 5 }\n    },{\n        id: 4,\n        name: 'Sap',\n        type: 'debuff',\n        cost: { acc: 1 },\n        effect: { debuffStr: 5 }\n    },{\n        id: 5,\n        name: 'Fraility',\n        type: 'debuff',\n        cost: { eva: 1 },\n        effect: { debuffStr: 5 }\n    },{\n        id: 6,\n        name: 'Bewilder',\n        type: 'debuff',\n        cost: { acc: 1 },\n        effect: { debuffDef: 5 }\n    },{\n        id: 7,\n        name: 'Spore Cloud',\n        type: 'debuff',\n        cost: { eva: 1 },\n        effect: { debuffDef: 5 }\n    },{\n        id: 8,\n        name: 'Haze',\n        type: 'debuff',\n        cost: { str: 1 },\n        effect: { debuffAcc: 5 }\n    },{\n        id: 9,\n        name: 'Dust Devil',\n        type: 'debuff',\n        cost: { def: 1 },\n        effect: { debuffAcc: 5 }\n    },{\n        id: 10,\n        name: 'Sand Trap',\n        type: 'debuff',\n        cost: { str: 1 },\n        effect: { debuffEva: 5 }\n    },{\n        id: 11,\n        name: 'Freeze',\n        type: 'debuff',\n        cost: { def: 1 },\n        effect: { debuffEva: 5 }\n    },{\n        id: 12,\n        name: 'Cauterize',\n        type: 'heal',\n        cost: { con: 1 },\n        effect: { heal: 1 }\n    },{\n        id: 13,\n        name: 'Cauterize',\n        type: 'heal',\n        cost: { con: 1 },\n        effect: { heal: 1 }\n    },{\n        id: 14,\n        name: 'Cauterize',\n        type: 'heal',\n        cost: { con: 1 },\n        effect: { heal: 1 }\n    }\n];\n\nfunction getSpells(numSpells) {\n    // If asking for more spells than we know, return them all\n    if (numSpells >= spellbook.length) {\n        return spellbook;\n    }\n\n    // Generate unique random numbers\n    let spellIndexes = [];\n    while (spellIndexes.length < numSpells) {\n        let randSpellIndex = Math.floor(Math.random() * spellbook.length);\n        if (-1 === spellIndexes.indexOf(randSpellIndex)) {\n            spellIndexes.push(randSpellIndex);\n        }\n    }\n\n    // Use those numbers to generate random spell list\n    let spellArray = [];\n    spellIndexes.forEach((index) => {\n        spellArray.push(spellbook[index]);\n    });\n    return spellArray;\n}\n\nexport default getSpells;\n","import React, { Component } from 'react';\nimport { AwesomeButton } from 'react-awesome-button';\nimport AwesomeButtonStyles from \"react-awesome-button/src/styles/styles.scss\";\n\nimport './Encounter.css';\nimport { resolveMelee, resolveSpell } from './combat';\nimport getSpells from './spellbook';\n\nclass Encounter extends Component {\n    constructor() {\n        super();\n        this.state = {\n            player: { \n                stats: {} \n            },\n            enemy: {\n                stats: {}\n            },\n            enableAction: true\n        }\n\n        this._displayActions = this.displayActions.bind(this);\n        this._attack = this.attack.bind(this);\n        this._draw = (...args) => this.draw(...args);\n    }\n\n    displayActions() {\n        return (\n            <div className='button-box'>\n                <AwesomeButton\n                    type='primary'\n                    // cssModule={ AwesomeButtonStyles }\n                    onPress={ this._attack }\n                >\n                    Attack\n                </AwesomeButton>\n                <AwesomeButton\n                    type=\"secondary\"\n                    onPress={ this._draw }\n                >\n                    Draw\n                </AwesomeButton>\n            </div>\n        )\n    }\n\n    attack() {\n        console.log('In attack')\n        if (this.state.enableAction) {\n            const newVals = resolveMelee(this.state.player, this.state.enemy);\n            console.log('!!', newVals);\n            this.setState({ player: newVals.attacker, enemy: newVals.defender, enableAction:false });\n        }\n    }\n\n    draw() {\n        console.log('draw');\n        const { player, updatePlayer } = this.state;\n        updatePlayer({\n            ...player,\n            cards: [...player.cards, ...getSpells(3)]\n        });\n    }\n\n    displayEntity(entity) {\n        return (\n            <div className='entity-data'>\n                <div className='row'>\n                    <div className='info-column column'>\n                        { entity.name }\n                    </div>\n                    <div className='stat-name-column column'>\n                        Str\n                    </div>\n                    <div className='stat-value-column column'>\n                        { entity.stats.str }\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='info-column column'>\n                        Base DMG: { entity.baseDmg }\n                    </div>\n                    <div className='stat-name-column column'>\n                        Def\n                    </div>\n                    <div className='stat-value-column column'>\n                        { entity.stats.def }\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='info-column column'>\n                        HP: { entity.hp }\n                    </div>\n                    <div className='stat-name-column column'>\n                        Acc\n                    </div>\n                    <div className='stat-value-column column'>\n                        { entity.stats.acc }\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='info-column column'>\n                    </div>\n                    <div className='stat-name-column column'>\n                        Eva\n                    </div>\n                    <div className='stat-value-column column'>\n                        { entity.stats.eva }\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='info-column column'>\n                    </div>\n                    <div className='stat-name-column column'>\n                        Const\n                    </div>\n                    <div className='stat-value-column column'>\n                        { entity.stats.con }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    componentWillReceiveProps(newProps) {\n        const { player, enemy, updatePlayer } = newProps;\n        this.setState({ player, enemy, updatePlayer });\n    }\n\n    render() {\n        return (\n            <div>\n                { this.displayEntity(this.state.player) }\n                { this.displayEntity(this.state.enemy) }\n                { this.displayActions() }\n                <Hand cards={this.state.player.cards} />\n            </div>\n        );\n    }\n}\n\nconst Hand = ({cards=[]}) => (\n    <div className=\"hand\">\n        {cards.map(card => (\n            <div className=\"card\" key={card.id}>\n                <div className=\"title\">{card.name}</div>\n                <div className=\"spacing\"></div>\n                <button className=\"action\">Play!</button>\n            </div>\n        ))}\n    </div>\n);\n\nexport default Encounter;\n","import constants from './static/constants';\n\n/*\n * determines base combat damage for melee between two entities\n * returns damage\n */\nfunction combatDamage(attacker, defender) {\n    return attacker.baseDmg + attacker.stats.str - defender.stats.def;\n}\n\nfunction resolveMelee(attacker, defender) {\n    console.log('In resolveMelee')\n    let hitNum = constants.BASE_HIT_NUMBER + attacker.stats.acc - defender.stats.eva + Math.floor((Math.random() * constants.HIT_DICE_SIDES) + 1);\n    let damage = combatDamage(attacker, defender);\n    let log;\n    if (hitNum <= 1) { // Miss\n        log = `${attacker.name} fails to land a hit! ${defender.name} received no damage!`;\n    } else if (hitNum <= 10 && hitNum >= 2) { // glancing blow\n        let glanceDmg = Math.floor(damage*0.5);\n        defender.hp = defender.hp - glanceDmg;\n        log = `${attacker.name} lands a glancing blow upon ${defender.name}. ${glanceDmg} damage was dealt`;\n    } else if (hitNum >=20) { // critical hit\n        let critDmg = damage*2;\n        defender.hp = defender.hp - critDmg;\n        log = `${attacker.name} lands a critical hit! ${critDmg} damage oozes out from ${defender.name}`;\n    } else { // hitNum <=19 && hitNum >=11, normal hit\n        defender.hp = defender.hp - damage;\n        log = `${attacker.name} hits ${defender.name}. ${damage} damage was dealt`;\n    }\n    console.log('Out resolveMelee')\n\n    return {attacker: attacker, defender: defender, logMessage: log};\n}\n\nfunction resolveSpell(attacker, defender, spell) {\n    // Deal with cost first\n    if (spell.cost.str) {\n        attacker.stats.str = attacker.stats.str - spell.cost.str;\n    }\n    if (spell.cost.def) {\n        attacker.stats.def = attacker.stats.def - spell.cost.def;\n    }\n    if (spell.cost.acc) {\n        attacker.stats.acc = attacker.stats.acc - spell.cost.acc;\n    }\n    if (spell.cost.eva) {\n        attacker.stats.eva = attacker.stats.eva - spell.cost.eva;\n    }\n    if (spell.cost.con) {\n        attacker.stats.con = attacker.stats.con - spell.cost.con;\n    }\n\n    // resolve spell effect & flavor text\n    let log;\n    if (spell.effect.damage) {\n        defender.hp = defender.hp - spell.effect.damage;\n        log = `${defender.name} is seared for ${spell.effect.damage} magical damage!`;\n    }\n    if (spell.effect.debuffStr) {\n        defender.stats.str = Math.max(defender.stats.str - spell.effect.debuffStr, 0);\n        log = `${defender.name} appears to struggle lifting their weapon`;\n    }\n    if (spell.effect.debuffDef) {\n        defender.stats.def = Math.max(defender.stats.def - spell.effect.debuffDef, 0);\n        log = `${defender.name} looks confused and is no longer bracing themselves against an attack`;\n    }\n    if (spell.effect.debuffAcc) {\n        defender.stats.acc = Math.max(defender.stats.acc - spell.effect.debuffAcc, 0);\n        log = `${defender.name} squints their eyes as they look off to your left`;\n    }\n    if (spell.effect.debuffEva) {\n        defender.stats.eva = Math.max(defender.stats.eva - spell.effect.debuffEva, 0);\n        log = `${defender.name} stumbles around as they loose their footing`;\n    }\n    if (spell.effect.heal) {\n        attacker.hp = attacker.stats.con;\n        log = \"As your wounds close, you feel much better.  Kind of...\";\n    }\n    return {attacker: attacker, defender: defender, logMessage: log};\n}\nexport {resolveMelee, resolveSpell};\n","const startingHealth = 10;\n\nconst playerInit = {\n    name: 'Player',\n    stats: {\n        acc: 10,\n        eva: 10,\n        str: 10,\n        def: 10,\n        con: startingHealth\n    },\n    baseDmg: 2,\n    hp: startingHealth,\n    cards: []\n}\n\nexport default playerInit;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Encounter from './Encounter';\nimport playerInit from './static/playerInit';\n\nclass World extends Component {\n    constructor() {\n        super();\n        this.state = {\n            player: {\n                stats: {},\n                baseDmg: 2,\n                cards: []\n            }\n        }\n\n        this.updatePlayer = this.updatePlayer.bind(this);\n    }\n\n    updatePlayer(player) {\n        this.setState({ player });\n    }\n\n    componentDidMount() {\n        this.setState({ player: playerInit });\n\n        const testEnemy = {\n            name: 'Reaper',\n            stats: {\n                acc: 10,\n                eva: 10,\n                str: 8,\n                def: 5,\n                con: 10\n            },\n            baseDmg: 1,\n            hp: 10\n        };\n        this.setState({ enemy: testEnemy });\n    }\n\n    render() {\n        return (\n            <div className='World'>\n                <Encounter player={ this.state.player } enemy={ this.state.enemy } updatePlayer={ this.updatePlayer } />\n            </div>\n        );\n    }\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <World />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}